#!/bin/bash
# Conventional commits validation script

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Read commit message
commit_message=$(cat "$1")
first_line=$(echo "$commit_message" | head -n1 | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

# Skip merge and revert commits
if echo "$first_line" | grep -q "^Merge \|^Revert "; then
    echo -e "${GREEN}✅ Skipping validation for merge/revert commit${NC}"
    exit 0
fi

# Check conventional commit format
pattern='^(feat|fix|docs|style|refactor|test|chore|perf|ci|build)(\([^)]+\))?: [a-z].*[^.]$'

if echo "$first_line" | grep -qE "$pattern"; then
    echo -e "${GREEN}✅ Commit message format is valid${NC}"
    exit 0
else
    echo -e "${RED}❌ Invalid commit message format!${NC}"
    echo ""
    echo -e "${YELLOW}Expected format: type(scope): description${NC}"
    echo ""
    echo "Valid types: feat, fix, docs, style, refactor, test, chore, perf, ci, build"
    echo ""
    echo "Examples:"
    echo "  feat: add new feature"
    echo "  fix(api): resolve timeout issue"
    echo "  docs: update README"
    echo ""
    echo -e "${RED}Your message:${NC} $first_line"
    exit 1
fi
