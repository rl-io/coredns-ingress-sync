apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "coredns-ingress-sync.fullname" . }}
  labels:
    {{- include "coredns-ingress-sync.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "coredns-ingress-sync.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        # Force pod replacement on helm upgrade (useful for :latest images)
        rollme: {{ randAlphaNum 5 | quote }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "coredns-ingress-sync.selectorLabels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ include "coredns-ingress-sync.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
      - name: {{ .Chart.Name }}
        securityContext:
          {{- toYaml .Values.securityContext | nindent 12 }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: INGRESS_CLASS
          value: {{ .Values.controller.ingressClass | quote }}
        - name: TARGET_CNAME
          value: {{ .Values.controller.targetCNAME | quote }}
        - name: WATCH_NAMESPACES
          value: {{ if .Values.controller.watchNamespaces }}{{ if kindIs "slice" .Values.controller.watchNamespaces }}{{ join "," .Values.controller.watchNamespaces | quote }}{{ else }}{{ .Values.controller.watchNamespaces | quote }}{{ end }}{{ else }}""{{ end }}
        - name: EXCLUDE_NAMESPACES
          value: {{ if .Values.controller.excludeNamespaces }}{{ if kindIs "slice" .Values.controller.excludeNamespaces }}{{ join "," .Values.controller.excludeNamespaces | quote }}{{ else }}{{ .Values.controller.excludeNamespaces | quote }}{{ end }}{{ else }}""{{ end }}
        - name: EXCLUDE_INGRESSES
          value: {{ if .Values.controller.excludeIngresses }}{{ if kindIs "slice" .Values.controller.excludeIngresses }}{{ join "," .Values.controller.excludeIngresses | quote }}{{ else }}{{ .Values.controller.excludeIngresses | quote }}{{ end }}{{ else }}""{{ end }}
        - name: ANNOTATION_ENABLED_KEY
          value: {{ .Values.controller.annotationEnabledKey | quote }}
        - name: DYNAMIC_CONFIGMAP_NAME
          value: {{ .Values.controller.dynamicConfigMap.name | quote }}
        - name: DYNAMIC_CONFIG_KEY
          value: {{ .Values.controller.dynamicConfigMap.key | quote }}
        - name: COREDNS_NAMESPACE
          value: {{ .Values.coreDNS.namespace | quote }}
        - name: COREDNS_CONFIGMAP_NAME
          value: {{ .Values.coreDNS.configMapName | quote }}
        - name: COREDNS_VOLUME_NAME
          value: {{ .Values.controller.volumeName | quote }}
        - name: DEPLOYMENT_NAME
          value: {{ include "coredns-ingress-sync.fullname" . | quote }}
        - name: MOUNT_PATH
          value: {{ if .Values.controller.mountPath }}{{ .Values.controller.mountPath | quote }}{{ else }}{{ printf "/etc/coredns/custom/%s" (include "coredns-ingress-sync.fullname" .) | quote }}{{ end }}
        - name: RELEASE_INSTANCE
          value: {{ include "coredns-ingress-sync.fullname" . | quote }}
        - name: COREDNS_AUTO_CONFIGURE
          value: {{ .Values.coreDNS.autoConfigure | quote }}
        - name: LEADER_ELECTION_ENABLED
          value: "true"
        - name: LOG_LEVEL
          value: {{ .Values.controller.logLevel | quote }}
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        {{- range $key, $value := .Values.controller.env }}
        - name: {{ $key }}
          value: {{ $value | quote }}
        {{- end }}
        ports:
        - name: health
          containerPort: 8081
          protocol: TCP
        {{- if .Values.metrics.enabled }}
        - name: metrics
          containerPort: {{ .Values.metrics.port }}
          protocol: TCP
        {{- end }}
        livenessProbe:
          httpGet:
            path: /healthz
            port: health
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /readyz
            port: health
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        resources:
          {{- toYaml .Values.resources | nindent 12 }}
        volumeMounts:
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: tmp
        emptyDir: {}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
