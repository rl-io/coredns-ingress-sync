name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]
  # Handle release-please events
  repository_dispatch:
    types: [release-please]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  security-events: write
  pull-requests: write
  issues: write
  statuses: write
  actions: write

jobs:
  debug-info:
    name: Debug Information
    runs-on: ubuntu-latest
    steps:
    - name: Debug PR info
      run: |
        echo "Event: ${{ github.event_name }}"
        echo "Ref: ${{ github.ref }}"
        echo "Head ref: ${{ github.head_ref }}"
        echo "Base ref: ${{ github.base_ref }}"
        echo "Actor: ${{ github.actor }}"
        echo "Repository: ${{ github.repository }}"
        if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
          echo "Dispatch type: ${{ github.event.action }}"
          echo "PR number: ${{ github.event.client_payload.pr_number }}"
        fi

  # Build and test jobs for both push events and release-please events
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'repository_dispatch' && github.event.action == 'release-please')
    outputs:
      image-tags: ${{ steps.docker_build.outputs.image_tags }}
      image-digest: ${{ steps.docker_build.outputs.image_digest }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.client_payload.ref || github.ref }}
      
    # Update build status to pending for release-please PRs
    - name: Update Build Status to Pending
      if: github.event_name == 'repository_dispatch' && github.event.action == 'release-please' && github.event.client_payload.pr_number
      uses: ./.github/actions/update-pr-status
      with:
        context: "Build Docker Image"
        state: "pending"
        description: "Building Docker image..."
        pr_number: ${{ github.event.client_payload.pr_number }}
        github_token: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Build Docker Image
      id: docker_build
      uses: ./.github/actions/docker-build
      with:
        image_name: coredns-ingress-sync
        push: false
        platforms: linux/amd64
        export_artifact: true

    # Update build status for release-please PRs
    - name: Update Build Status on Success
      if: success() && github.event_name == 'repository_dispatch' && github.event.action == 'release-please' && github.event.client_payload.pr_number
      uses: ./.github/actions/update-pr-status
      with:
        context: "Build Docker Image"
        state: "success"
        description: "Build completed successfully"
        pr_number: ${{ github.event.client_payload.pr_number }}
        github_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update Build Status on Failure
      if: failure() && github.event_name == 'repository_dispatch' && github.event.action == 'release-please' && github.event.client_payload.pr_number
      uses: ./.github/actions/update-pr-status
      with:
        context: "Build Docker Image"
        state: "failure"
        description: "Build failed"
        pr_number: ${{ github.event.client_payload.pr_number }}
        github_token: ${{ secrets.GITHUB_TOKEN }}

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'repository_dispatch' && github.event.action == 'release-please')
    needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.client_payload.ref || github.ref }}
      
    # Update test status to pending for release-please PRs
    - name: Update Test Status to Pending
      if: github.event_name == 'repository_dispatch' && github.event.action == 'release-please' && github.event.client_payload.pr_number
      uses: ./.github/actions/update-pr-status
      with:
        context: "Run Tests"
        state: "pending"
        description: "Running comprehensive tests..."
        pr_number: ${{ github.event.client_payload.pr_number }}
        github_token: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Download image artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-image
        path: /tmp
        
    - name: Run Comprehensive Tests
      uses: ./.github/actions/test-runner
      with:
        go_version: '1.24'
        run_integration_tests: true
        run_e2e_tests: true
        codecov_token: ${{ secrets.CODECOV_TOKEN }}
        image_artifact_path: /tmp
        cluster_timeout: 120

    # Update test status for release-please PRs
    - name: Update Test Status on Success
      if: success() && github.event_name == 'repository_dispatch' && github.event.action == 'release-please' && github.event.client_payload.pr_number
      uses: ./.github/actions/update-pr-status
      with:
        context: "Run Tests"
        state: "success"
        description: "Tests completed successfully"
        pr_number: ${{ github.event.client_payload.pr_number }}
        github_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update Test Status on Failure
      if: failure() && github.event_name == 'repository_dispatch' && github.event.action == 'release-please' && github.event.client_payload.pr_number
      uses: ./.github/actions/update-pr-status
      with:
        context: "Run Tests"
        state: "failure"
        description: "Tests failed"
        pr_number: ${{ github.event.client_payload.pr_number }}
        github_token: ${{ secrets.GITHUB_TOKEN }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'repository_dispatch' && github.event.action == 'release-please')
    needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.client_payload.ref || github.ref }}
      
    # Update security scan status to pending for release-please PRs
    - name: Update Security Scan Status to Pending
      if: github.event_name == 'repository_dispatch' && github.event.action == 'release-please' && github.event.client_payload.pr_number
      uses: ./.github/actions/update-pr-status
      with:
        context: "Security Scan"
        state: "pending"
        description: "Running security scans..."
        pr_number: ${{ github.event.client_payload.pr_number }}
        github_token: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Download image artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-image
        path: /tmp
        
    - name: Run Security Scan
      uses: ./.github/actions/security-scan
      with:
        image_name: coredns-ingress-sync:test
        image_artifact_path: /tmp
        scan_filesystem: true
        upload_sarif: true
        github_token: ${{ secrets.GITHUB_TOKEN }}

    # Update security scan status for release-please PRs
    - name: Update Security Scan Status on Success
      if: success() && github.event_name == 'repository_dispatch' && github.event.action == 'release-please' && github.event.client_payload.pr_number
      uses: ./.github/actions/update-pr-status
      with:
        context: "Security Scan"
        state: "success"
        description: "Security scan completed successfully"
        pr_number: ${{ github.event.client_payload.pr_number }}
        github_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update Security Scan Status on Failure
      if: failure() && github.event_name == 'repository_dispatch' && github.event.action == 'release-please' && github.event.client_payload.pr_number
      uses: ./.github/actions/update-pr-status
      with:
        context: "Security Scan"
        state: "failure"
        description: "Security scan failed"
        pr_number: ${{ github.event.client_payload.pr_number }}
        github_token: ${{ secrets.GITHUB_TOKEN }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download artifacts
      uses: actions/download-artifact@v4
      
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        draft: false
        prerelease: false
        generate_release_notes: true
        files: |
          coverage-reports/coverage.html
          test-results/**/*
          sbom/sbom.spdx.json
        body: |
          ## üöÄ coredns-ingress-sync controller Release
          
          This release includes:
          - ‚úÖ Full test suite validation
          - üîí Security vulnerability scanning
          - üì¶ Multi-architecture Docker images (amd64, arm64)
          - üîê Signed container images
          - üìã Software Bill of Materials (SBOM)
          
          ### Docker Images
          ```bash
          docker pull ghcr.io/${{ github.repository }}:${{ github.ref_name }}
          docker pull ghcr.io/${{ github.repository }}:latest
          ```
          
          ### Verification
          ```bash
          # Verify image signature
          cosign verify ghcr.io/${{ github.repository }}:${{ github.ref_name }}
          ```
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
