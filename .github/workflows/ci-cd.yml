name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]
  # Handle release-please events
  repository_dispatch:
    types: [release-please]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  security-events: write
  pull-requests: write
  issues: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Create status checks on release-please PR
  setup-pr-status:
    name: Setup PR Status Checks
    runs-on: ubuntu-latest
    if: github.event_name == 'repository_dispatch' && github.event.action == 'release-please'
    outputs:
      sha: ${{ steps.get-pr-sha.outputs.sha }}
    steps:
    - name: Get PR SHA and repository info
      id: get-pr-sha
      run: |
        PR_NUMBER="${{ github.event.client_payload.pr_number }}"
        if [ -n "$PR_NUMBER" ]; then
          SHA=$(gh api repos/${{ github.repository }}/pulls/$PR_NUMBER --jq '.head.sha')
          echo "sha=$SHA" >> $GITHUB_OUTPUT
          echo "Retrieved SHA $SHA for PR #$PR_NUMBER"
          
          # Extract owner and repo
          echo "owner=${{ github.repository_owner }}" >> $GITHUB_OUTPUT
          echo "repo=${{ github.event.repository.name }}" >> $GITHUB_OUTPUT
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set Pending Status for Build
      if: steps.get-pr-sha.outputs.sha
      uses: guibranco/github-status-action-v2@v1
      with:
        authToken: ${{ secrets.GITHUB_TOKEN }}
        owner: ${{ github.repository_owner }}
        repository: ${{ github.event.repository.name }}
        sha: ${{ steps.get-pr-sha.outputs.sha }}
        state: "pending"
        context: "CI / build"
        description: "Running build job..."
    
    - name: Set Pending Status for Test
      if: steps.get-pr-sha.outputs.sha
      uses: guibranco/github-status-action-v2@v1
      with:
        authToken: ${{ secrets.GITHUB_TOKEN }}
        owner: ${{ github.repository_owner }}
        repository: ${{ github.event.repository.name }}
        sha: ${{ steps.get-pr-sha.outputs.sha }}
        state: "pending"
        context: "CI / test"
        description: "Running test job..."
    
    - name: Set Pending Status for Security Scan
      if: steps.get-pr-sha.outputs.sha
      uses: guibranco/github-status-action-v2@v1
      with:
        authToken: ${{ secrets.GITHUB_TOKEN }}
        owner: ${{ github.repository_owner }}
        repository: ${{ github.event.repository.name }}
        sha: ${{ steps.get-pr-sha.outputs.sha }}
        state: "pending"
        context: "CI / security-scan"
        description: "Running security scan job..."
    
    - name: Set Pending Status for Build and Push
      if: steps.get-pr-sha.outputs.sha
      uses: guibranco/github-status-action-v2@v1
      with:
        authToken: ${{ secrets.GITHUB_TOKEN }}
        owner: ${{ github.repository_owner }}
        repository: ${{ github.event.repository.name }}
        sha: ${{ steps.get-pr-sha.outputs.sha }}
        state: "pending"
        context: "CI / build-and-push"
        description: "Running build and push job..."

  debug-info:
    name: Debug Information
    runs-on: ubuntu-latest
    steps:
    - name: Debug PR info
      run: |
        echo "Event: ${{ github.event_name }}"
        echo "Ref: ${{ github.ref }}"
        echo "Head ref: ${{ github.head_ref }}"
        echo "Base ref: ${{ github.base_ref }}"
        echo "Actor: ${{ github.actor }}"
        echo "Repository: ${{ github.repository }}"

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: coredns-ingress-sync
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-,enable={{is_default_branch}}
          type=sha,prefix=pr-,enable=${{ github.event_name == 'pull_request' }}
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and export image
      id: build
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64
        push: false
        tags: |
          coredns-ingress-sync:test
          coredns-ingress-sync:latest
          ${{ steps.meta.outputs.tags }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=docker,dest=/tmp/image.tar
        
    - name: Upload image artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: /tmp/image.tar
        retention-days: 1

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        cache: true
          
    - name: Set up Go module permissions
      run: |
        # Ensure proper permissions for Go modules
        if [ -d ~/go/pkg/mod ]; then
          chmod -R u+w ~/go/pkg/mod || true
        fi
          
    - name: Download dependencies
      run: |
        go mod download
        go mod verify
      
    - name: Run unit tests
      run: LOG_LEVEL=debug go test -v -race -coverprofile=coverage.out ./...
      
    - name: Generate coverage report
      run: go tool cover -html=coverage.out -o coverage.html
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        flags: unittests
        name: codecov-umbrella
        slug: rl-io/coredns-ingress-sync
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false
        
    - name: Coverage upload status
      if: env.CODECOV_TOKEN == ''
      run: |
        echo "ℹ️  Codecov token not configured - coverage upload skipped"
        echo "Coverage report still generated and available in artifacts"
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          coverage.out
          coverage.html
          
    - name: Download image artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-image
        path: /tmp
        
    - name: Load Docker image
      run: docker load -i /tmp/image.tar
          
    - name: Create Kind config
      run: |
        cat > kind-config.yaml << 'EOF'
        kind: Cluster
        apiVersion: kind.x-k8s.io/v1alpha4
        nodes:
        - role: control-plane
          kubeadmConfigPatches:
          - |
            kind: InitConfiguration
            nodeRegistration:
              kubeletExtraArgs:
                node-labels: "ingress-ready=true"
          extraPortMappings:
          - containerPort: 80
            hostPort: 80
            protocol: TCP
          - containerPort: 443
            hostPort: 443
            protocol: TCP
        EOF
        
    - name: Set up Kind cluster
      uses: helm/kind-action@v1.12.0
      with:
        cluster_name: test-cluster
        config: kind-config.yaml
              
    - name: Load image into Kind cluster
      run: |
        # The image is already loaded from the artifact
        docker tag coredns-ingress-sync:test coredns-ingress-sync:latest
        kind load docker-image coredns-ingress-sync:latest --name test-cluster
        
    - name: Install nginx-ingress
      run: |
        kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml
        kubectl wait --namespace ingress-nginx --for=condition=ready pod --selector=app.kubernetes.io/component=controller --timeout=120s
        
    - name: Install Helm
      uses: azure/setup-helm@v4
      with:
        version: v3.12.0
        
    - name: Cache Helm repositories
      uses: actions/cache@v4
      with:
        path: ~/.cache/helm
        key: ${{ runner.os }}-helm-${{ hashFiles('**/Chart.yaml') }}
        restore-keys: |
          ${{ runner.os }}-helm-
        
    - name: Deploy controller for testing
      run: |
        # Deploy the controller using Helm with development values (local image)
        helm upgrade --install coredns-ingress-sync \
          ./helm/coredns-ingress-sync \
          --namespace coredns-ingress-sync \
          --create-namespace \
          --wait \
          --timeout 30s \
          --values ./helm/coredns-ingress-sync/values-dev.yaml \
          --set image.pullPolicy=Never
        
        # Wait for deployment with timeout and detailed logging
        echo "Waiting for controller deployment..."
        kubectl wait --for=condition=available --timeout=30s deployment/coredns-ingress-sync -n coredns-ingress-sync || {
          echo "Controller deployment failed to become ready. Debugging..."
          kubectl get pods -n coredns-ingress-sync
          kubectl describe deployment coredns-ingress-sync -n coredns-ingress-sync
          kubectl logs -n coredns-ingress-sync deployment/coredns-ingress-sync --tail=50 || echo "No logs available"
          exit 1
        }
        
        echo "Controller deployment successful"
        
    - name: Run integration tests
      run: |
        export KUBECONFIG=$HOME/.kube/config
        chmod +x tests/run_tests.sh
        
        # Debug cluster state before running tests
        echo "=== Cluster state before tests ==="
        kubectl get pods -A
        kubectl get deployments -A
        kubectl get configmaps -n kube-system | grep coredns
        
        echo "=== Controller status ==="
        kubectl get deployment coredns-ingress-sync -n coredns-ingress-sync -o yaml
        kubectl get pods -n coredns-ingress-sync
        kubectl describe pods -n coredns-ingress-sync
        
        echo "=== ConfigMap status ==="
        kubectl get configmap coredns -n kube-system -o yaml
        
        echo "=== Controller logs ==="
        kubectl logs -n coredns-ingress-sync deployment/coredns-ingress-sync --tail=100 || echo "No logs available"
        
        echo "=== Running integration tests ==="
        ./tests/run_tests.sh --integration || {
          echo "Integration tests failed. Debugging..."
          echo "=== Final cluster state ==="
          kubectl get pods -A
          kubectl get ingresses -A
          kubectl get configmaps -n kube-system | grep coredns
          
          echo "=== Controller ConfigMap content ==="
          kubectl get configmap coredns -n kube-system -o yaml
          
          echo "=== Controller logs ==="
          kubectl logs -n coredns-ingress-sync deployment/coredns-ingress-sync --tail=100
          
          echo "=== Recent events ==="
          kubectl get events --sort-by=.metadata.creationTimestamp --tail=20
          
          exit 1
        }
        
    - name: Run E2E tests
      run: |
        export KUBECONFIG=$HOME/.kube/config
        
        echo "=== Running E2E tests ==="
        ./tests/run_tests.sh --e2e || {
          echo "E2E tests failed. Debugging..."
          echo "=== Final cluster state ==="
          kubectl get pods -A
          kubectl get events --sort-by=.metadata.creationTimestamp
          exit 1
        }
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: test_results/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [test, build]
    
    # Primary security scanning job - runs Trivy on every push/PR
    # SARIF uploads to Security tab only work for public repositories
    # For private repos, results are displayed in logs and uploaded as artifacts
    
    permissions:
      contents: read
      security-events: write
      actions: read
      statuses: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download image artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-image
        path: /tmp
        
    - name: Load Docker image
      run: |
        docker load -i /tmp/image.tar
        docker tag coredns-ingress-sync:test coredns-ingress-sync:scan
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'coredns-ingress-sync:scan'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      if: always() && github.event.repository.visibility == 'public'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
        category: 'trivy-container-scan'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Display Trivy scan results (for private repos)
      if: always() && github.event.repository.visibility != 'public'
      run: |
        echo "=== Trivy Container Scan Results ==="
        echo "Repository is private - security scanning upload skipped"
        echo "Scan results saved to trivy-results.sarif"
        if [ -f "trivy-results.sarif" ]; then
          echo "Scan completed successfully"
          # Show summary of findings
          cat trivy-results.sarif | jq -r '.runs[0].results[] | "Found: " + .ruleId + " - " + .message.text' || echo "No vulnerabilities found or jq not available"
        else
          echo "Scan file not found"
        fi
        
    - name: Run Trivy filesystem scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-fs-results.sarif'
        
    - name: Upload filesystem scan results
      if: always() && github.event.repository.visibility == 'public'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-fs-results.sarif'
        category: 'trivy-filesystem-scan'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Display filesystem scan results (for private repos)
      if: always() && github.event.repository.visibility != 'public'
      run: |
        echo "=== Trivy Filesystem Scan Results ==="
        echo "Repository is private - security scanning upload skipped"
        echo "Scan results saved to trivy-fs-results.sarif"
        if [ -f "trivy-fs-results.sarif" ]; then
          echo "Scan completed successfully"
          # Show summary of findings
          cat trivy-fs-results.sarif | jq -r '.runs[0].results[] | "Found: " + .ruleId + " - " + .message.text' || echo "No vulnerabilities found or jq not available"
        else
          echo "Scan file not found"
        fi
        
    - name: Upload SARIF files as artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: trivy-sarif-results
        path: |
          trivy-results.sarif
          trivy-fs-results.sarif
        retention-days: 30

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name != 'pull_request'
    
    permissions:
      contents: read
      packages: write
      id-token: write # Required for keyless signing
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-,enable={{is_default_branch}}
          type=sha,prefix=pr-,enable=${{ github.event_name == 'pull_request' }}
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push multi-platform Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: spdx-json
        output-file: sbom.spdx.json
        
    - name: Upload SBOM
      uses: actions/upload-artifact@v4
      with:
        name: sbom
        path: sbom.spdx.json
        
    - name: Install cosign
      uses: sigstore/cosign-installer@v3.9.2
      
    - name: Sign the published Docker image
      if: github.event_name != 'pull_request'
      env:
        COSIGN_EXPERIMENTAL: 1
        COSIGN_OIDC_CLIENT_ID: sigstore
        COSIGN_OIDC_ISSUER: https://token.actions.githubusercontent.com
      run: |
        # Sign all the tags that were pushed using keyless signing with retry logic
        echo "${{ steps.meta.outputs.tags }}" | while read tag; do
          if [[ -n "$tag" ]]; then
            echo "Signing $tag"
            # Retry signing up to 3 times to handle transient TUF errors
            for attempt in {1..3}; do
              if cosign sign --yes "$tag"; then
                echo "Successfully signed $tag on attempt $attempt"
                break
              else
                echo "Failed to sign $tag on attempt $attempt"
                if [[ $attempt -eq 3 ]]; then
                  echo "All signing attempts failed for $tag"
                  exit 1
                fi
                echo "Waiting 10 seconds before retry..."
                sleep 10
              fi
            done
          fi
        done

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build-and-push
    if: startsWith(github.ref, 'refs/tags/v')
    
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download artifacts
      uses: actions/download-artifact@v4
      
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        draft: false
        prerelease: false
        generate_release_notes: true
        files: |
          coverage-reports/coverage.html
          test-results/**/*
          sbom/sbom.spdx.json
        body: |
          ## 🚀 coredns-ingress-sync controller Release
          
          This release includes:
          - ✅ Full test suite validation
          - 🔒 Security vulnerability scanning
          - 📦 Multi-architecture Docker images (amd64, arm64)
          - 🔐 Signed container images
          - 📋 Software Bill of Materials (SBOM)
          
          ### Docker Images
          ```bash
          docker pull ghcr.io/${{ github.repository }}:${{ github.ref_name }}
          docker pull ghcr.io/${{ github.repository }}:latest
          ```
          
          ### Verification
          ```bash
          # Verify image signature
          cosign verify ghcr.io/${{ github.repository }}:${{ github.ref_name }}
          ```
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Update PR status checks after all jobs complete
  update-pr-status:
    name: Update PR Status Checks
    runs-on: ubuntu-latest
    if: always() && github.event_name == 'repository_dispatch' && github.event.action == 'release-please'
    needs: [setup-pr-status, build, test, security-scan, build-and-push]
    steps:
    - name: Get PR SHA
      id: get-pr-sha
      run: |
        PR_NUMBER="${{ github.event.client_payload.pr_number }}"
        if [ -n "$PR_NUMBER" ]; then
          SHA=$(gh api repos/${{ github.repository }}/pulls/$PR_NUMBER --jq '.head.sha')
          echo "sha=$SHA" >> $GITHUB_OUTPUT
          echo "Retrieved SHA $SHA for PR #$PR_NUMBER"
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Update Build Status
      if: steps.get-pr-sha.outputs.sha
      uses: guibranco/github-status-action-v2@v1
      with:
        authToken: ${{ secrets.GITHUB_TOKEN }}
        owner: ${{ github.repository_owner }}
        repository: ${{ github.event.repository.name }}
        sha: ${{ steps.get-pr-sha.outputs.sha }}
        state: "${{ needs.build.result == 'success' && 'success' || 'failure' }}"
        context: "CI / build"
        description: "${{ needs.build.result == 'success' && 'Build completed successfully' || 'Build failed' }}"
        target_url: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
    
    - name: Update Test Status
      if: steps.get-pr-sha.outputs.sha
      uses: guibranco/github-status-action-v2@v1
      with:
        authToken: ${{ secrets.GITHUB_TOKEN }}
        owner: ${{ github.repository_owner }}
        repository: ${{ github.event.repository.name }}
        sha: ${{ steps.get-pr-sha.outputs.sha }}
        state: "${{ needs.test.result == 'success' && 'success' || 'failure' }}"
        context: "CI / test"
        description: "${{ needs.test.result == 'success' && 'Tests completed successfully' || 'Tests failed' }}"
        target_url: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
    
    - name: Update Security Scan Status
      if: steps.get-pr-sha.outputs.sha
      uses: guibranco/github-status-action-v2@v1
      with:
        authToken: ${{ secrets.GITHUB_TOKEN }}
        owner: ${{ github.repository_owner }}
        repository: ${{ github.event.repository.name }}
        sha: ${{ steps.get-pr-sha.outputs.sha }}
        state: "${{ needs.security-scan.result == 'success' && 'success' || 'failure' }}"
        context: "CI / security-scan"
        description: "${{ needs.security-scan.result == 'success' && 'Security scan completed successfully' || 'Security scan failed' }}"
        target_url: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
    
    - name: Update Build and Push Status
      if: steps.get-pr-sha.outputs.sha
      uses: guibranco/github-status-action-v2@v1
      with:
        authToken: ${{ secrets.GITHUB_TOKEN }}
        owner: ${{ github.repository_owner }}
        repository: ${{ github.event.repository.name }}
        sha: ${{ steps.get-pr-sha.outputs.sha }}
        state: "${{ needs.build-and-push.result == 'success' && 'success' || 'failure' }}"
        context: "CI / build-and-push"
        description: "${{ needs.build-and-push.result == 'success' && 'Build and push completed successfully' || 'Build and push failed' }}"
        target_url: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
