name: Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]
  # Handle release-please events
  repository_dispatch:
    types: [release-please]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  security-events: write
  pull-requests: write
  issues: write
  statuses: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Create status checks on release-please PR
  setup-pr-status:
    name: Setup PR Status Checks
    runs-on: ubuntu-latest
    if: github.event_name == 'repository_dispatch' && github.event.action == 'release-please'
    outputs:
      sha: ${{ steps.get-pr-sha.outputs.sha }}
    steps:
    - name: Get PR SHA and repository info
      id: get-pr-sha
      run: |
        PR_NUMBER="${{ github.event.client_payload.pr_number }}"
        if [ -n "$PR_NUMBER" ]; then
          SHA=$(gh api repos/${{ github.repository }}/pulls/$PR_NUMBER --jq '.head.sha')
          echo "sha=$SHA" >> $GITHUB_OUTPUT
          echo "Retrieved SHA $SHA for PR #$PR_NUMBER"
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set Pending Status for Build
      if: steps.get-pr-sha.outputs.sha
      uses: guibranco/github-status-action-v2@v1
      with:
        authToken: ${{ secrets.GITHUB_TOKEN }}
        owner: ${{ github.repository_owner }}
        repository: ${{ github.event.repository.name }}
        sha: ${{ steps.get-pr-sha.outputs.sha }}
        state: "pending"
        context: "CI/CD Pipeline / build"
        description: "Running build job..."
        target_url: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
    
    - name: Set Pending Status for Test
      if: steps.get-pr-sha.outputs.sha
      uses: guibranco/github-status-action-v2@v1
      with:
        authToken: ${{ secrets.GITHUB_TOKEN }}
        owner: ${{ github.repository_owner }}
        repository: ${{ github.event.repository.name }}
        sha: ${{ steps.get-pr-sha.outputs.sha }}
        state: "pending"
        context: "CI/CD Pipeline / test"
        description: "Running test job..."
        target_url: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [setup-pr-status]
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: coredns-ingress-sync
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-,enable={{is_default_branch}}
          type=sha,prefix=pr-,enable=${{ github.event_name == 'pull_request' }}
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and export image
      id: build
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64
        push: false
        tags: |
          coredns-ingress-sync:test
          coredns-ingress-sync:latest
          ${{ steps.meta.outputs.tags }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=docker,dest=/tmp/image.tar
        
    - name: Upload image artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: /tmp/image.tar
        retention-days: 1

    # Update build status using reusable action
    - name: Update Build Status on Success
      if: success() && github.event_name == 'repository_dispatch' && github.event.action == 'release-please'
      uses: ./.github/actions/update-pr-status
      with:
        context: "CI/CD Pipeline / build"
        state: "success"
        description: "Build completed successfully"
        pr_number: ${{ github.event.client_payload.pr_number }}
        github_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update Build Status on Failure
      if: failure() && github.event_name == 'repository_dispatch' && github.event.action == 'release-please'
      uses: ./.github/actions/update-pr-status
      with:
        context: "CI/CD Pipeline / build"
        state: "failure"
        description: "Build failed"
        pr_number: ${{ github.event.client_payload.pr_number }}
        github_token: ${{ secrets.GITHUB_TOKEN }}

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        cache: true
          
    - name: Set up Go module permissions
      run: |
        if [ -d ~/go/pkg/mod ]; then
          chmod -R u+w ~/go/pkg/mod || true
        fi
          
    - name: Download dependencies
      run: |
        go mod download
        go mod verify
      
    - name: Run unit tests
      run: LOG_LEVEL=debug go test -v -race -coverprofile=coverage.out ./...
      
    - name: Generate coverage report
      run: go tool cover -html=coverage.out -o coverage.html
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        flags: unittests
        name: codecov-umbrella
        slug: rl-io/coredns-ingress-sync
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false
        
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          coverage.out
          coverage.html
          
    - name: Download image artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-image
        path: /tmp
        
    - name: Load Docker image
      run: docker load -i /tmp/image.tar
          
    - name: Create Kind config
      run: |
        cat > kind-config.yaml << 'EOF'
        kind: Cluster
        apiVersion: kind.x-k8s.io/v1alpha4
        nodes:
        - role: control-plane
          kubeadmConfigPatches:
          - |
            kind: InitConfiguration
            nodeRegistration:
              kubeletExtraArgs:
                node-labels: "ingress-ready=true"
          extraPortMappings:
          - containerPort: 80
            hostPort: 80
            protocol: TCP
          - containerPort: 443
            hostPort: 443
            protocol: TCP
        EOF
        
    - name: Set up Kind cluster
      uses: helm/kind-action@v1.12.0
      with:
        cluster_name: test-cluster
        config: kind-config.yaml
              
    - name: Load image into Kind cluster
      run: |
        docker tag coredns-ingress-sync:test coredns-ingress-sync:latest
        kind load docker-image coredns-ingress-sync:latest --name test-cluster
        
    - name: Install nginx-ingress
      run: |
        kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml
        kubectl wait --namespace ingress-nginx --for=condition=ready pod --selector=app.kubernetes.io/component=controller --timeout=120s
        
    - name: Install Helm
      uses: azure/setup-helm@v4
      with:
        version: v3.12.0
        
    - name: Deploy controller for testing
      run: |
        helm upgrade --install coredns-ingress-sync \
          ./helm/coredns-ingress-sync \
          --namespace coredns-ingress-sync \
          --create-namespace \
          --wait \
          --timeout 30s \
          --values ./helm/coredns-ingress-sync/values-dev.yaml \
          --set image.pullPolicy=Never
        
        kubectl wait --for=condition=available --timeout=30s deployment/coredns-ingress-sync -n coredns-ingress-sync
        
    - name: Run integration tests
      run: |
        export KUBECONFIG=$HOME/.kube/config
        chmod +x tests/run_tests.sh
        ./tests/run_tests.sh --integration
        
    - name: Run E2E tests
      run: |
        export KUBECONFIG=$HOME/.kube/config
        ./tests/run_tests.sh --e2e
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: test_results/

    # Update test status using reusable action
    - name: Update Test Status on Success
      if: success() && github.event_name == 'repository_dispatch' && github.event.action == 'release-please'
      uses: ./.github/actions/update-pr-status
      with:
        context: "CI/CD Pipeline / test"
        state: "success"
        description: "Tests completed successfully"
        pr_number: ${{ github.event.client_payload.pr_number }}
        github_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update Test Status on Failure
      if: failure() && github.event_name == 'repository_dispatch' && github.event.action == 'release-please'
      uses: ./.github/actions/update-pr-status
      with:
        context: "CI/CD Pipeline / test"
        state: "failure"
        description: "Tests failed"
        pr_number: ${{ github.event.client_payload.pr_number }}
        github_token: ${{ secrets.GITHUB_TOKEN }}
