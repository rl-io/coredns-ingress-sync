name: Build and Test

on:
  # Only run for release-please repository_dispatch events
  repository_dispatch:
    types: [release-please]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  security-events: write
  pull-requests: write
  issues: write
  statuses: write

jobs:
  # Create status checks on release-please PR
  setup-pr-status:
    name: Setup PR Status Checks
    runs-on: ubuntu-latest
    if: github.event_name == 'repository_dispatch' && github.event.action == 'release-please'
    outputs:
      sha: ${{ steps.get-pr-sha.outputs.sha }}
    steps:
    - name: Get PR SHA and repository info
      id: get-pr-sha
      run: |
        PR_NUMBER="${{ github.event.client_payload.pr_number }}"
        if [ -n "$PR_NUMBER" ]; then
          SHA=$(gh api repos/${{ github.repository }}/pulls/$PR_NUMBER --jq '.head.sha')
          echo "sha=$SHA" >> $GITHUB_OUTPUT
          echo "Retrieved SHA $SHA for PR #$PR_NUMBER"
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set Pending Status for Build
      if: steps.get-pr-sha.outputs.sha
      uses: guibranco/github-status-action-v2@v1
      with:
        authToken: ${{ secrets.GITHUB_TOKEN }}
        owner: ${{ github.repository_owner }}
        repository: ${{ github.event.repository.name }}
        sha: ${{ steps.get-pr-sha.outputs.sha }}
        state: "pending"
        context: "CI/CD Pipeline / build"
        description: "Running build job..."
        target_url: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
    
    - name: Set Pending Status for Test
      if: steps.get-pr-sha.outputs.sha
      uses: guibranco/github-status-action-v2@v1
      with:
        authToken: ${{ secrets.GITHUB_TOKEN }}
        owner: ${{ github.repository_owner }}
        repository: ${{ github.event.repository.name }}
        sha: ${{ steps.get-pr-sha.outputs.sha }}
        state: "pending"
        context: "CI/CD Pipeline / test"
        description: "Running test job..."
        target_url: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    outputs:
      image-tags: ${{ steps.docker_build.outputs.image_tags }}
      image-digest: ${{ steps.docker_build.outputs.image_digest }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build Docker Image
      id: docker_build
      uses: ./.github/actions/docker-build
      with:
        image_name: coredns-ingress-sync
        push: false
        platforms: linux/amd64
        export_artifact: true

    # Update build status using reusable action
    - name: Update Build Status on Success
      if: success() && github.event_name == 'repository_dispatch' && github.event.action == 'release-please'
      uses: ./.github/actions/update-pr-status
      with:
        context: "CI/CD Pipeline / build"
        state: "success"
        description: "Build completed successfully"
        pr_number: ${{ github.event.client_payload.pr_number }}
        github_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update Build Status on Failure
      if: failure() && github.event_name == 'repository_dispatch' && github.event.action == 'release-please'
      uses: ./.github/actions/update-pr-status
      with:
        context: "CI/CD Pipeline / build"
        state: "failure"
        description: "Build failed"
        pr_number: ${{ github.event.client_payload.pr_number }}
        github_token: ${{ secrets.GITHUB_TOKEN }}

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download image artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-image
        path: /tmp
        
    - name: Run Comprehensive Tests
      uses: ./.github/actions/test-runner
      with:
        go_version: '1.24'
        run_integration_tests: true
        run_e2e_tests: true
        codecov_token: ${{ secrets.CODECOV_TOKEN }}
        image_artifact_path: /tmp
        cluster_timeout: 120

    # Update test status using reusable action
    - name: Update Test Status on Success
      if: success() && github.event_name == 'repository_dispatch' && github.event.action == 'release-please'
      uses: ./.github/actions/update-pr-status
      with:
        context: "CI/CD Pipeline / test"
        state: "success"
        description: "Tests completed successfully"
        pr_number: ${{ github.event.client_payload.pr_number }}
        github_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update Test Status on Failure
      if: failure() && github.event_name == 'repository_dispatch' && github.event.action == 'release-please'
      uses: ./.github/actions/update-pr-status
      with:
        context: "CI/CD Pipeline / test"
        state: "failure"
        description: "Tests failed"
        pr_number: ${{ github.event.client_payload.pr_number }}
        github_token: ${{ secrets.GITHUB_TOKEN }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download image artifact
      uses: actions/download-artifact@v4
      with:
        name: docker-image
        path: /tmp
        
    - name: Run Security Scan
      uses: ./.github/actions/security-scan
      with:
        image_name: coredns-ingress-sync:test
        image_artifact_path: /tmp
        scan_filesystem: true
        upload_sarif: true
        github_token: ${{ secrets.GITHUB_TOKEN }}
